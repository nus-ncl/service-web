buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.22.RELEASE'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'io.spring.dependency-management' version '0.6.0.RELEASE'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'org.sonarqube' version '3.1.1'
    id 'com.jfrog.bintray' version '1.7.1'
    id 'org.tenne.rest' version '0.4.2'
    id 'org.springframework.boot' version '2.5.2'
}

// get commit id for version
ext {
    commit_id =  "git rev-parse --short HEAD".execute().text.substring(0,7)
}

version = "${commit_id}"

// build configuration
configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }
}

// publish to Github package repository
publishing {
    publications {
        gpr(MavenPublication) {
            groupId = 'sg.ncl'
            artifactId = 'service-web'
            version = "${commit_id}"
            from components.java
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/nus-ncl/service-web"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

// Java Version
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'io.spring.platform:platform-bom:2.0.6.RELEASE'
        mavenBom 'org.springframework.boot:spring-boot-dependencies:1.5.22.RELEASE'
    }
    dependencies {
        dependency 'org.apache.commons:commons-lang3:3.4'
        dependency 'commons-io:commons-io:2.5'
        dependency 'org.projectlombok:lombok:1.16.10'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time' // for thymeleaf to format zoneddatetime into readable format
    implementation 'javax.inject:javax.inject'
    implementation 'org.json:json'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'commons-io:commons-io'
    implementation 'org.projectlombok:lombok'
    implementation 'com.jcraft:jsch:0.1.54'

    testImplementation 'org.apache.commons:commons-lang3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

    implementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
    implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"
}

compileJava {
    dependsOn processResources
}



tasks.jacocoTestReport {
    reports {
        xml.enabled true
    }
}

// Code security testing with SonarCloud
//sonarqube {
//    properties {
//        property 'sonar.host.url', 'https://sonarcloud.io'
//        property 'sonar.organization', 'nus-ncl-github'
//        property "sonar.projectKey", "nus-ncl_service-web"
//        property 'sonar.login', System.getenv('SONAR_TOKEN')
//        property 'sonar.github.oauth', System.getenv('GITHUB_TOKEN')
//        property 'sonar.sources', 'src/main/resources/static/js'
//    }
//}

task bamboo(type: org._10ne.gradle.rest.RestTask) {
    println 'bamboo task is running'
    httpMethod = 'post'
    uri = 'https://bamboo.ncl.sg/rest/api/latest/queue/NCL-WS'
    contentType = groovyx.net.http.ContentType.JSON
    requestHeaders = [
            Accept       : 'application/json',
            Authorization: System.getenv('BAMBOO_CREDENTIALS')
    ]
    responseHandler = {
        assert it.buildNumber != null
        println '- Response: ' + it
    }
    println 'bamboo task is done'
}

// Trigger Bamboo Action
task triggerBamboo {
    doLast {
        if (System.getenv('GITHUB_REF') == 'refs/heads/master' && System.getenv('GITHUB_ACTIONS') == 'true') {
            println 'Triggering Bamboo Build:'
            tasks.bamboo.finalizedBy()
        } else {
            println 'Failed Triggering Bamboo Build: Not master branch or Not running in github actions'
        }
    }
}

task printInfo {
    doLast{
        println "  - project: ${project.name}"
        println "  - archive artifacts: ${project.configurations.archives.allArtifacts.size()}"
        project.configurations.archives.artifacts.files.each {
            println "    - ${it.name}"
        }
        println "  - group: ${project.group}"
        println "  - version: ${project.version}"
        println "  - ${subprojects.size()} subprojects:"
        subprojects.each {
            println "    - ${it.name}:"
            println "      - archive artifacts: ${it.configurations.archives.allArtifacts.size()}"
            it.configurations.archives.artifacts.files.each {
                println "        - ${it.name}"
            }
            println "      - group: ${it.group}"
            println "      - version: ${it.version}"
        }
    }
}

// Change gradle version at root/gradle/wrapper
wrapper{
    gradleVersion '6.8.3'
    distributionUrl "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

jar {
    enabled = false
}

bootJar {
    mainClass = 'sg.ncl.WebApplication'
}

